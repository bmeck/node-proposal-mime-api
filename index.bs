<pre class=metadata>
Group: Node
Title: MIME API
H1: MIME API
Editor: Bradley Farias, GoDaddy, bradley.meck@gmail.com
Shortname: mimeapi
<!-- Text Macro: REPLACEME -->
Abstract: The MIME API Standard defines an API for interacting with MIME Types.
<!-- Translation: -->
Status: DREAM
!Issues: <a href="https://github.com/bmeck/node-proposal-mime-api/issues">https://github.com/bmeck/node-proposal-mime-api/issues</a>
</pre>


<h2 id=goals class=no-num>Goals</h2>

<p>The MIME standard takes the following approach towards making MIMEs easier to use:

<ul>
 <li><p>Define a MIME's JavaScript API in full detail. Add a new <code><a interface>MIME</a></code>
 object as well for MIME manipulation.
</ul>

<!--[UNLIKELY] <p class=note>As the editors learn more about the subject matter the goals
might increase in scope somewhat.-->



<h2 id=infrastructure>Infrastructure</h2>

<p>This specification depends on the Infra Standard. [[!INFRA]]

<p>Some terms used in this specification are defined in the following standards and specifications:

<ul class=brief>
 <li>Mime Sniffing [[!MIMESNIFF]]
</ul>

<p>To <dfn export id=set-the-type for=mime>set the type</dfn> given a <var>mime</var> and
  <var>type</var>, run these steps:
  
<ol>
  <li><p>Remove any leading <a>ASCII whitespace</a> from <var>type</var>

  <li><p>If <var>type</var> is empty or does not consist entirely of <a>HTTP token code point</a>s, throw a {{TypeError}}.

  <li><p>Set <var>mime</var>'s type to the value of <var>type</var>.
</ol>

<p>To <dfn export id=set-the-subtype for=mime>set the subtype</dfn> given a <var>mime</var> and
  <var>subtype</var>, run these steps:
  
<ol>
  <li><p>Remove any trailing <a>ASCII whitespace</a> from <var>subtype</var>

  <li><p>If <var>subtype</var> is empty or does not consist entirely of <a>HTTP token code point</a>s, throw a {{TypeError}}.

  <li><p>Set <var>mime</var>'s subtype to the value of <var>subtype</var>.
</ol>

<p>To <dfn export id=set-a-parameter for=mime>set a parameter</dfn> given a <var>parameters</var>, <var>name</var>, and
  <var>value</var>, run these steps:
  
<ol>
  <li><p>Remove any leading <a>ASCII whitespace</a> from <var>name</var>

  <li><p>If <var>name</var> is empty or does not consist entirely of <a>HTTP token code points</a>, throw a {{TypeError}}.

  <li><p>If <var>value</var> is empty or does not consist entirely of <a>HTTP quoted-string token code points</a>, throw a {{TypeError}}.

  <li><p>Set <var>parameters</var>' property whose name is <var>name</var> to the value of <var>value</var>.
</ol>

<h2 id=api>API</h2>


<h3 id=mime-class>MIME class</h3>

<pre class=idl>
[Constructor(USVString mime),
 Exposed=(Window,Worker)]
interface MIME {
           attribute USVString type;
           attribute USVString subtype;
  [SameObject] readonly attribute MIMEParams mimeParams;

  stringifier USVString toJSON();
};
</pre>

<p>A {{MIME}} object has an associated <a lt=mimesniff>mime</a> (a
<a for=/>MIME</a>) and <a lt=mimesniff#parameters>parameters</a> (a
{{MIMEParams}} object).

<hr>

<p id=constructors>The <dfn constructor for=MIME><code>MIME(<var>mime</var>)</code></dfn> constructor, when invoked, must run these steps:

<ol>
 <li><p>Let <var>mimeType</var> be null.

 <li><p>Let <var>mimeType</var> be the result of running the <a>parse a mime type</a> on
 <var>mime</var>.

 <li><p>If <var>mimeType</var> is failure, then <a>throw</a> a {{TypeError}}.

 <li><p>Let <var>params</var> be <var>mimeType</var>'s <a for=mimesniff>parameters</a>.

 <li><p>Let <var>result</var> be a new {{MIME}} object.

 <li><p>Set <var>result</var>'s <a for=MIME>mime</a> to <var>mimeType</var>.

 <li><p>Set <var>result</var>'s <a for=MIME>parameters object</a> to a <a for=MIMEParams>new</a>
 {{MIMEParams}}, and then set that <a for=MIME>parameters object</a>'s
 <a for=MIMEParams>parameters object</a> to <var>params</var>.

 <li><p>Return <var>result</var>.
</ol>

<div class="example no-backref" id=example-5434421b>
 <p>To <a lt="">parse</a> a string into a <a for=/>MIME</a>, invoke the {{MIME}} constructor with a single argument:

 <pre><code class="lang-javascript">
var input = "text/javascript; charset=utf-8;",
    mime = new MIME(input)
mime.subtype // "javascript"</code></pre>

 <p>This throws an exception if the input is not a valid MIME:

 <pre><code class="lang-javascript">
try {
  var mime = new MIME("/")
} catch(e) {
  // that happened
}</code></pre>

 <p>A {{MIME}} object can be used as input (while IDL requires a string as argument, a
 {{MIME}} object stringifies to its serialized form):</p>

 <pre><code class="lang-javascript">
var mime = new MIME(new MIME("text/plain"))
mime.type // "text"</code></pre>
</div>

<hr id=mimeutils-members>

<p>The <dfn attribute for=MIME><code>href</code></dfn> attribute's getter and the
<dfn method for=/><code>toJSON()</code></dfn> method, when invoked, must return the
<a>serialize a mime type</a> algorithm on <a>context object</a>'s <a for=MIME>mime</a>.

<p>The <dfn attribute for=MIME><code>type</code></dfn> attribute's getter must run these steps:

  <ol>
    <li><p>Return <a>context object</a>'s <a for=MIME>mime</a>'s <a for=mime>type</a>.
  </ol>

<p>The <code><a attribute for=MIME>type</a></code> attribute's setter must run these steps:

<ol>
 <li><p><a for=mime>Set the type</a> given <a>context object</a>'s <a for=MIME>mime</a> and the given value.
</ol>

<p>The <dfn attribute for=MIME><code>mimeParams</code></dfn> attribute's getter must return
<a>context object</a>'s <a for=MIME>parameters object</a>.

<h3 id=interface-mimeparams>MIMEParams class</h3>

<pre class=idl>
[Exposed=(Window,Worker)]
interface MIMEParams {
  void delete(USVString name);
  USVString? get(USVString name);
  boolean has(USVString name);
  void set(USVString name, USVString value);

  iterable&lt;USVString, USVString>;
};
</pre>

<p>A {{MIMEParams}} object has an associated
<a for=mimesniff>parameters</a> object <dfn for=MIMEParams>parameters</dfn>,
which is initially null.

<p>To create a <dfn export for=MIMEParams id=concept-mimeparams-new>new</dfn>
{{MIMEParams}} object using <var>init</var>, run these steps:

<ol>
 <li><p>Let <var>params</var> be a new {{MIMEParams}} object.

 <li><p>If <var>init</var> is not a mime record's <a for=mimesniff>parameters</a> object, then <a>throw</a> a {{TypeError}}.

 <li><p>Return <var>params</var>.
</ol>

<p>The <dfn method for=MIMEParams><code>delete(<var>name</var>)</code></dfn> method, when
invoked, must run these steps:

<ol>
 <li><p>If there is not a property whose name is <var>name</var>
  in <a for=MIMEParams>parameters</a>, return false.
  <li><p>Delete the property whose name is <var>name</var> in <a for=MIMEParams>parameters</a>.
  <li><p>Return true.
</ol>

<p>The
<dfn method for=MIMEParams><code>get(<var>name</var>)</code></dfn>
method, when invoked, must return the value of the property whose name is
<var>name</var> in <a for=MIMEParams>parameters</a>, if there is such a property, and null otherwise.

<p>The
<dfn method for=MIMEParams><code>has(<var>name</var>)</code></dfn>
method, when invoked, must return true if there is a property whose name is <var>name</var>
in <a for=MIMEParams>parameters</a>, and false otherwise.

<p>The
<dfn method for=MIMEParams><code>set(<var>name</var>, <var>value</var>)</code></dfn>
method, when invoked, must return the result of <a for=MIMEParams>setting a parameter</a> given <a>parameters</a>, <var>name</var>, and <var>value</var>

<hr>

<h3 id=mime-apis-elsewhere>MIME APIs elsewhere</h3>

<p>A standard that exposes <a for=/>MIMEs</a>, should expose the <a for=/>MIME</a> as a string (by
running <a>serialize a mime type</a> for an internal <a for=/>MIME</a>'s mime). A standard should not expose a
<a for=/>MIME</a> using a {{MIME}} object. {{MIME}} objects are meant for <a for=/>MIME</a>
manipulation. In IDL the USVString type should be used.

<p class=note>The higher-level notion here is that values are to be exposed as immutable data
structures.

<p>If a standard decides to use a variant of the name "MIME" for a feature it defines, it should name
such a feature "mime" (i.e., lowercase and not media type. Names such as "MIME", "MediaType", and
"MIMEType" should not be used. However, if the name is a compound, "MIME" (i.e., uppercase) is preferred,
e.g., "newMIME" and "oldMIME".

<p class=note>The {{EventSource}} and {{HashChangeEvent}} interfaces in HTML are examples of proper
naming. [[!HTML]]



<h2 id=acknowledgments class=no-num>Acknowledgments</h2>

<!--<p>Thanks to
lots of people but unsure how this usually expands
</p>-->

<p>This standard is written by
Bradley Farias
(<a href=https://www.godaddy.com/>GoDaddy</a>,
<a href=mailto:bradley.meck@gmail.com>bradley.meck@gmail.com</a>).

<!--
<pre class=anchors>
</pre>

<pre class="link-defaults">
  ??? the docs on this confused me
</pre>
-->